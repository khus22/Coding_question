Question-
Given an array, arr of n integers, and an integer element x, find whether element x is present in the array. Return the index of the first occurrence of x in the array, or -1 if it doesn't exist.

Solution-
class Solution {

    static int search(int arr[], int n, int x) {
        for(int i = 0; i < n; i++) {
            if(arr[i] == x) {
                return i;
            }
        }
        return -1;
    }
}

Explanation:
Loop through the array: We loop through each element of the array using for(int i = 0; i < n; i++).
Check for the element: Inside the loop, we check if the current element arr[i] is equal to the target element x.
Return the index if found: If the element is found, we return the index i.
Return -1 if not found: If the loop completes without finding the element, we return -1 indicating the element was not found in the array.

Complexity
Time Complexity:
The time complexity of the search algorithm is O(n), where n is the number of elements in the array. This is because in the worst-case scenario, the algorithm needs to iterate through all n elements of the array to determine if the target element x is present.

Space Complexity:
The space complexity of the search algorithm is O(1). This is because the algorithm uses a constant amount of extra space regardless of the size of the input array. The only additional memory used is 
for the loop variable i and the target variable x, which are both single integer values.

Summary:
Time Complexity: O(n)
Space Complexity: O(1)
